INFORMATION FOR DEVELOPERS
==========================

1. General
----------

This is only a framework for patches, and its usefulness is directly
proportional to the number of available patches. I created a few patches
to demonstrate both what it can do, and to provide useful examples to
get started. If you're interested in developing your own patches, you
are more than welcome! 

1. Download the source code from https://bitbucket.org/ixtab/jbpatcher
2. Take a look at the com.mobileread.ixtab.patch.* classes,
   and most importantly at com.mobileread.ixtab.jbpatch.Patch.
   The examples show various approaches to modify byte code, and the
   "Patch" class gives some hints about the general usage.
3. If you haven't already done so, get familiar with the JVM specification,
   and a few helpful tools (like Java Bytecode Editor, and JAD). Be
   prepared for frustratingly slow progress, and frustratingly many weird
   errors, as you slowly make your way through Reverse Engineering
   Wonderland. And don't despair, because after going through it, the
   reward is great.
4. Post your patches on mobileread so everyone can benefit from them!
   And feel free to post (non-trivial) questions there as well. ;-)

2. Advanced patches
-------------------

The original idea was to have patches be single, self-contained files. This
works well for small patches which compile to a single .class file. However,
this may be too limited for more complex scenarios, where patches require
multiple classes, or other resources, like localized strings etc. For that
reason, starting with version 1.2.0, jbpatch supports zip files (actually jar
files, but renamed to .zip for user convenience) as well.

The only requirement for such files is that they contain a valid manifest which
specifies the main class (the actual Patch). A complete example of such an
advanced patch can be found in the sources: refer to
com.mobileread.ixtab.patch.tts.TTSPatch, and build.xml for packaging it.

3. Localization and Parameterization
------------------------------------

Patches can be both parameterized AND localized by using simple files
(com.mobileread.ixtab.patch.tts.TTSPatch can be used as a working example).

The Patch class contains the method getResourcesUrl(). You can override this
method to provide the file containing parameters and/or translations. At
runtime, use the get() method to retrieve (localized) parameters.

3.1. File format
----------------

The file format is very simple, and closely resembles the well-known .ini format.
Files are expected in UTF-8 encoding, so every language on the planet can easily
be supported.

Each line is expected to contain key/value pairs, separated by a "=".

In addition, localization is achieved by adding "sections" with the locale name.
Note that you MUST provide a "[en]" section, which serves as the default.

Finally, lines starting with "#", and empty lines, are ignored.

For instance, the 5 lines below show a valid configuration, which yields different
runtime results, depending on the language the Kindle is running:
[en]
my.patch.description=An absolutely awesome patch
my.patch.parameter=42
[de]
my.patch.description=Ein toller Patch

3.2 Lookup procedure
--------------------
Resource lookup is ALWAYS language-specific. At most, 3 different sections will
be consulted to find a value for a specific key. This is best explained by example:
suppose your Kindle locale is fr_FR. Then, if you are looking up the key "test",
the following will be returned:

- the value of "test", defined in section "fr_FR", if it exists. Otherwise:
- the value of "test", defined in section "fr", if it exists. Otherwise:
- the value of "test", defined in section "en", if it exists. Othwerwise:
- the literal string "test" (the requested key name), because no definitions were found.

For an english Kindle, the lookup would consult the sections "en_US", then "en".

To summarize:
- if you only need parameterization, but no localization, define all your
  parameters in a section "[en]". This section MUST be present, otherwise you
  will only get back the literal key name.
- if you only need localization, provide at least a complete "[en]" section,
  and as many other languages as you want.
- if you need localization AND parameterization, I suggest to put parameters only
  in the "[en]" section, while putting actual translations in their own sections.
  If your file is meant to be editable by end users, you should make this clear
  in the documentation as well.
  

